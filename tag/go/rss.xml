<xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>blog.drakejin.me</link>
   <description>데이터 분석은 잘 못하지만, 데이터 분석할 수 있게 도와드리겠어요!</description>
   <language>utf-8</language>
   <managingEditor> drakejin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>(스터디) Go 언어를.arabojja - 2</title>
	  <link>//Study-go-2</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-20T00:00:00+09:00</pubDate>
	  <guid>//Study-go-2</guid>
	  <description><![CDATA[
	     <p>[데이터공작소] Write &amp; Compile &amp; Run 배움의 WCR  &gt;  &lt;  !!</p>

<h2 id="section">마라톤 코딩</h2>
<p><a href="https://gobyexample.com/">gobyexample.com</a></p>

<p>일단 컴파일이 된다면 대강 한페이지의 코드를 작성하는대 지장없다는 소리다.
그러면… 질릴때까지 예제만 주구장창 쳐보다가 지칠때쯤 다시 이론으로 돌아가보도록 하자.</p>

<ul>
  <li><a href="">1.Hello World.go</a></li>
  <li><a href="">2.Values.go</a></li>
  <li><a href="">3.Variables.go</a></li>
  <li><a href="">4.Constants.go</a></li>
  <li><a href="">5.For.go</a></li>
  <li><a href="">6.If/Else.go</a></li>
  <li><a href="">7.Switch.go</a></li>
  <li><a href="">8.Arrays.go</a></li>
  <li><a href="">9.Slices.go</a></li>
  <li><a href="">10.Maps.go</a></li>
  <li><a href="">11.Range.go</a></li>
  <li><a href="">12.Functions.go</a></li>
  <li><a href="">13.Multiple Return Values.go</a></li>
  <li><a href="">14.Variadic Functions.go</a></li>
  <li><a href="">15.Closures.go</a></li>
  <li><a href="">16.Recursion.go</a></li>
  <li><a href="">17.Pointers.go</a></li>
  <li><a href="">18.Structs.go</a></li>
  <li><a href="">19.Methods.go</a></li>
  <li><a href="">20.Interfaces.go</a></li>
  <li><a href="">21.Errors.go</a></li>
  <li><a href="0">22.Goroutines.go</a></li>
  <li><a href="">23.Channels.go</a></li>
  <li><a href="">24.Channel_Buffering.go</a></li>
  <li><a href="0">25.Channel Synchronization.go</a></li>
  <li><a href="">26.Channel Directions.go</a></li>
  <li><a href="">27.Select.go</a></li>
  <li><a href="">28.Timeouts.go</a></li>
  <li><a href="">29.Non-Blocking_Channel_Operations.go</a></li>
  <li><a href="">30.Closing Channels.go</a></li>
  <li><a href="">31.Range over Channels.go</a></li>
  <li><a href="">32.Timers.go</a></li>
  <li><a href="">33.Tickers.go</a></li>
  <li><a href="">34.Worker Pools.go</a></li>
  <li><a href="">35.Rate Limiting.go</a></li>
  <li><a href="">36.Atomic Counters.go</a></li>
  <li><a href="">37.Mutexes.go</a></li>
  <li><a href="">38.Stateful Goroutines.go</a></li>
  <li><a href="">39.Sorting.go</a></li>
  <li><a href="">40.Sorting by Functions.go</a></li>
  <li><a href="">41.Panic.go</a></li>
  <li><a href="">42.Defer.go</a></li>
  <li><a href="">43.Collection Functions.go</a></li>
  <li><a href="">44.String Functions.go</a></li>
  <li><a href="">45.String Formatting.go</a></li>
  <li><a href="">46.Regular Expressions.go</a></li>
  <li><a href="">47.JSON.go</a></li>
  <li><a href="">48.Time.go</a></li>
  <li><a href="">49.Epoch.go</a></li>
  <li><a href="">50.Time Formatting / Parsing.go</a></li>
  <li><a href="">51.Random Numbers.go</a></li>
  <li><a href="">52.Number Parsing.go</a></li>
  <li><a href="">53.URL Parsing.go</a></li>
  <li><a href="">54.SHA1 Hashes.go</a></li>
  <li><a href="">55.Base64 Encoding.go</a></li>
  <li><a href="">56.Reading Files.go</a></li>
  <li><a href="">57.Writing Files.go</a></li>
  <li><a href="">58.Line Filters.go</a></li>
  <li><a href="">59.Command-Line Arguments.go</a></li>
  <li><a href="">60.Command-Line Flags.go</a></li>
  <li><a href="">61.Environment Variables.go</a></li>
  <li><a href="">62.Spawning Processes.go</a></li>
  <li><a href="">63.Exec’ing Processes.go</a></li>
  <li><a href="">64.Signals.go</a></li>
  <li><a href="">65.Exit.go</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>(스터디) Go 언어를.arabojja - 1</title>
	  <link>//Study-go-1</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-20T00:00:00+09:00</pubDate>
	  <guid>//Study-go-1</guid>
	  <description><![CDATA[
	     <p>[데이터공작소] 일단 시작하기 앞서서 설치를 먼저 해봅시다.</p>

<h2 id="section">설치</h2>
<p>Go Compiler는 공식 웹페이지 에서 다운 받을 수 있다.  버전은 1.8.1</p>

<ol>
  <li>플랫폼별 인스톨 파일
    <ul>
      <li><a href="https://storage.googleapis.com/golang/go1.8.1.linux-amd64.tar.gz">Linux 다운로드</a></li>
      <li><a href="https://storage.googleapis.com/golang/go1.8.1.darwin-amd64.pkg">MacOS 다운로드</a></li>
      <li><a href="https://storage.googleapis.com/golang/go1.8.1.windows-amd64.msi">Windows 다운로드</a></li>
    </ul>
  </li>
  <li>환경변수 및 PATH 설정[<a href="https://golang.org/doc/install?download=go1.8.1.linux-amd64.tar.gz">참고페이지</a>]</li>
</ol>

<p>``` sh</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ sudo tar -C /usr/local -xzf go1.8.1.linux-amd64.tar.gz 
$ vi ~/.zshrc

# ----------- vi ~/.zshrc -------------------------------
GOROOT=/usr/local/go
PATH=$PATH:$GO_HOME/bin:$GOROOT/bin

export PATH GOROOT
# ------------------------------------------------------   ```
</code></pre>
</div>

<h4 id="vi-bashrc--">vi ~/.bashrc 파일 설정</h4>

<p><img src="/assets/images/post/2017-05-20/bash.png" alt="vi .bashrc.sh" /></p>

<ol>
  <li>Source 편집</li>
</ol>

<p>``` go</p>

<div class="highlighter-rouge"><pre class="highlight"><code>$ vi {CUSTOM\_PROJECT\_HOME}/src/hello/hello.go  
----------------
package main 
import "fmt"

func main(){
    fmt.Printf("Hello world\n")
}
---------------
$ cd {CUSTOM\_PROJECT\_HOME}/src/hello
$ go build 
</code></pre>
</div>

<p>```</p>

<h4 id="vi-bashrc---1">vi ~/.bashrc 파일 설정</h4>

<p><img src="/assets/images/post/2017-05-20/hello.go.png" alt="vi hello.go" /></p>

<h4 id="section-1">소스 실행 결과</h4>

<p><img src="/assets/images/post/2017-05-20/hello-result.png" alt="result hello.go" /></p>

<h4 id="go---">설치된 Go 의 환경설정 확인</h4>

<p><img src="/assets/images/post/2017-05-20/env.png" alt="go env" /></p>

<p>여기 과정까지 무사히 왔다면 설치는 완료</p>


	  ]]></description>
	</item>

	<item>
	  <title>(스터디) Go 언어를.arabogga - Intro</title>
	  <link>//Study-go-intro</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-19T00:00:00+09:00</pubDate>
	  <guid>//Study-go-intro</guid>
	  <description><![CDATA[
	     <p>[데이터공작소] Go언어에 대해 알아볼까요 ?</p>

<h5 id="section">이 언어를 시작하게 된 동기</h5>
<p>Retrica 면접을 보는대 Retrica 서버는 Go 언어와 ProtoBuf를 활용한 서버를 사용중이었다. 
면접 질문중에서 ..</p>

<blockquote>
  <p>면접관 질문 : 용진씨가 해본 언어 Java, Javascript, Python 위 셋 중에 어떤언어가 
철학적으로 마음에 들며, 어떤 언어를 배우고 싶으신가요?</p>
</blockquote>

<p>사실 Retrica에 들어가기 전부터 Go와 Erlang를 배우고 싶어했었다. 하지만, 취업을 해야하는 입장에서
뭐가 하고 싶다 하더라도 쉽게 도전할 깡다구가 생기지 않는다. 영어하랴, 자소서쓰랴 등등.. 
여러가지 요인이 날 방해하고있었기 때문이다. 답변은 속 시원하게 말아먹었었다.</p>

<blockquote>
  <p>내 답변 : “철학으로는 Javascript고 배우고 싶은 언어는 Go와 Erlang입니다. 
Javascript의 … (나도 정확히 모르는 내용을 예시를 들려고해서 아예 이 답변을 말아먹었다. ) 
그리고 Go 와 Erlang 은 배우고 싶은대 그 이유는 분산처리에 탁월하다는 능력을 들었었습니다. 
직접 해본적은 없지만 만약 배운다면 Go또는 Erlang을 배우고 싶었습니다. 
Erlang은 네이버 라인에서 사용하고 있는 언어로 동접자가 기하급수로 불어난 서비스에 어떻게 해서 
Erlang으로 구축할 생각을 했었는지 어떤 의사결정을 통해 Erlang을 선택했는지 궁금했습니다..(생략)”</p>
</blockquote>

<p>아직 결과는 나오지 않았지만 분명 탈락일것이다. 
내가 면접관이라도 모르는 내용으로 답변하려 들면 기분좋게 탈락시켰을 태니 말이다.</p>

<blockquote>
  <p>즉, 지금은 이 언어를 시작하게 된 동기는 원래 배우고 싶었지만 결정적인 원인은
실제로 해보고 싶었으면서 면접에서 탈탈 털린 내 자신에게 한탄하기위해 시작한다.</p>
</blockquote>

<hr />
<p>Retrica에서 면접보러온사람이 서버개발자 팀장급과 Retrica 를 처음 만든 창업자 장본인(CEO)이 와서
면접을 보았다. 난 이것에 탈락되어도 후회하지않는다. ( 아쉽긴 하지만 ) 심지어 싸인도 받아보고 싶다.</p>

<h2 id="intro">Intro</h2>
<p>불순한 동기로 시작한 언어지만 자세히 알아보도록 합니다.</p>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>값</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>개발자</td>
      <td>로버트 그리즈머, 롭 파이크, 켄 톰슨</td>
    </tr>
    <tr>
      <td>공식 홈페이지</td>
      <td><a href="http://golang.org">http://golang.org</a></td>
    </tr>
    <tr>
      <td>개발 회사</td>
      <td>Google 갓 구글 차냥해!</td>
    </tr>
    <tr>
      <td>라이센스</td>
      <td>BSD</td>
    </tr>
  </tbody>
</table>

<h4 id="go---">시작하기전에 Go 뽕 맞고 시작하자.</h4>

<iframe width="560" height="315" src="https://www.youtube.com/embed/LJvEIjRBSDA" frameborder="0" allowfullscreen=""></iframe>

<blockquote>
  <p>Write in Go(Lyrics)
The schedule’s tight on the cluster tonight
분산환경에서 해야 할 일로 쉴 틈 없을 오늘밤</p>

  <p>So I parallelized my code
그래서 저는 병렬화된 코드를 작성했지요</p>

  <p>All those threads and continuations
그 모든 스레드와 연속성들로</p>

  <p>My head’s going to explode
제 머리는 폭발하기 일보직전이랍니다</p>

  <p>And all that boilerplate
심지어 그 모든 의례적인 코드들</p>

  <p>That FactoryBuilderAdapterDelegateImpl
그 모든 “괴상야릇한디자인패턴의복잡다단한구현의향연”</p>

  <p>Seems unjustified
이건 제가 가야 할 길이 아닌 것만 같아요</p>

  <p>Give me something simple
좀 더 간결한 길을 알려주시겠어요?</p>

  <p>Don’t write in Scheme
스킴 쓰지 마세요</p>

  <p>Don’t write in C 
C로 짜지 마세요</p>

  <p>No more pointers that I forget to free() 
해제하길 깜빡한 포인터여 이제 그만 안녕</p>

  <p>Java’s verbose, Python’s too slow 
Java는 번잡하고, 파이썬은 느려터졌단 걸</p>

  <p>It’s time you know
이제 깨달을 때가 왔어요</p>

  <p>Write in Go! Write in Go! 
Go로 짜세요, Go로 짜세요!</p>

  <p>No inheritance anymore
클래스 상속이여 이제 그만 안녕</p>

  <p>Write in Go! Write in Go! 
Go로 짜세요, Go로 짜세요!</p>

  <p>There’s no do or while, just for 
do도 while도 없어, for뿐</p>

  <p>I don’t care what your linters say
당신의 linter가 뭐라 불평하든 상관없어요</p>

  <p>I’ve got tools for that
제겐 해결책이 있답니다</p>

  <p>The code never bothered me anyway
코드 자체가 신경 쓸 일을 만들지 않을테니 말이죠</p>
</blockquote>

<h2 id="go-">Go언어의 활약</h2>
<ul>
  <li>Docker를 만든 언어 go !</li>
  <li>드롭박스</li>
  <li>클라우드 플레어</li>
  <li>사운드클라우드</li>
  <li>넷플릭스</li>
  <li>트위치</li>
  <li>뉴욕타임즈 Gizmo API</li>
  <li>SpaceX 원격측정 프로그램</li>
</ul>

<h2 id="section-1">배경지식</h2>
<p>전반적으로 C에서 영향을 많이 받았으며, 철학으로는 단순함을 목표로 한다.
나온 지 5년 동안은 구글에 취직이라도 하지 않는 이상 배워봤자 딱히 쓸 데가 없다는 이유로 새로운 언어에 관심이 많은 덕후얼리어답터 개발자들 사이에서나 알음알음 쓰이던 정도였지만
Go 언어 사용자들을 Gopher라 부르며, Gopher 들을 위해 매년 <a href="https://www.gophercon.com/">고퍼콘(Gophercon)</a>이 열리긴한다.(Gophercon Korea 는 가끔 인 것 같은 것…? ) 
많은 종류의 프로그램 버그는 프로그래밍 언어 차원에서 원천적으로 차단될 수 있으며, 
프로그래밍 언어 연구자들은 쓰기 쉬우면서도 최대한 많은 버그를 컴파일 시점에 잡을 수 있는 타입 시스템을 만드는데 많은 노력을 기울이고 있다.</p>

<ul>
  <li>2009년 11월에 처음 나옴,</li>
  <li>2014년 12월에 1.4 버전</li>
  <li>2015년 8월에 1.5 버전
    <ul>
      <li>1.5 버전에서는 드디어 Go 컴파일러가 Go로 작성되었다.</li>
      <li>그 이전까지는 C언어로 작성.</li>
      <li>자기 자신으로 구현된 컴파일러가 생겼다는 것은 개발 속도에 상당한 가속이 붙게 되었다는 의미가 될 수 있다.[4]</li>
    </ul>
  </li>
  <li>2016년 2월에는 HTTP/2가 기본으로 지원되고 템플릿 문법의 개선 등이 이루어진 1.6 버전이 릴리즈되었다</li>
  <li>2016년 8월에는 컴파일 속도의 개선, 실행 퍼포먼스 향상, /x/net/context 패키지의 기본 패키지화 등이 이루어진 1.7 버전이 릴리즈되었다.</li>
</ul>

<h4 id="section-2">(릴리즈 특징)</h4>
<ul>
  <li>여전히 1.4 버전에 비해 컴파일 속도는 느림(Go Compiler 를 사용하고 나서..)</li>
  <li>2018년 2월에 32비트 MIPS 명령어 지원, 컴파일러 프론트 엔드 추가, 가비지 컬렉션 개선, Cgo의 오버 헤드 개선 등의 변경점이 있는 1.8 버전이 출시</li>
</ul>

<h4 id="go--">Go 언어의 특징</h4>
<ul>
  <li>Go 언어를 이용해서 안드로이드와 iOS 앱을 제작할 수 있게 적용 중이다.</li>
  <li>웹 개발에도 쓰이고 있고 특히 서버 사이드 언어로서 좋은 평가를 받고 있다.</li>
  <li>Go가 자체적으로 지원하는 라이브러리만으로도 간결하게 웹사이트를 만들어낼 수 있다.</li>
  <li>Go 언어의 특징은 컴파일 언어이지만 컴파일러의 컴파일 속도가 매우 빨라 인터프리터 언어처럼 쓸 수 있다는 점에 있다.
언어의 문법 구조를 개선함으로써 달성하였다. 컴파일러가 소스 코드를 해석하는 pass 수를 줄여서 달성한 것으로 보인다.</li>
  <li>접근하기 어렵지 않고, 코드 역시 간결하면서도 컴파일 언어답게 높은 성능을 낼 수 있다는 점이 호평을 받는다.</li>
  <li>간결하게 코드를 작성할 수 있으면서도 풍부한 라이브러리 등의 덕택에 막강한 기능을 쉽게 구현할 수 있다는 것은 큰 장점이다.</li>
  <li>그러나 컴파일 언어의 태생적인 한계를 극복한 것은 아니라서 대형 모듈을 이것저것 붙이면 컴파일에 필요한 시간이 있기에 Python 등의 인터프리터 언어보다는 기동할 때에 확실히 반응이 늦다.</li>
  <li>물론 컴파일 언어 중에서는 매우 빠른 편이지만 아무래도 인터프리터 언어의 즉흥성까지 바라는 건 무리. 물론 컴파일 언어인만큼 실행 시 퍼포먼스는 확실하다.</li>
</ul>

<h4 id="go---1">Go 루틴에 대해</h4>
<p>Go는 GoRoutine이라는 비동기 메커니즘을 제공한다. 이 비동기 메커니즘은 <em>Erlang</em>에서 영향을 받은 것으로 각각의 고루틴은 병렬로 동작하며 메시지 채널을 통해 값을 주고받는다.<br />
고루틴을 사용하면 이벤트 처리, 병렬 프로그래밍 등이 간단해진다. 단 병렬화된 고루틴의 동기화 문제는 프로그래머가 챙겨 줘야 하며 동기화를 무시할 경우 프로그램이 비정상 종료할 수도 있다.</p>

<p>예를 들어 부모 루틴이 자식 루틴보다 먼저 끝나버리면 자식 루틴은 OS에 의해 메모리에서 강제로 사출되어 버린다. 
단 동기화 방법은 기존 멀티스레드 응용프로그램에 비해 매우 간단한 편. 단순히 고루틴으로부터 반환값을 받는 줄을 메인 스레드에 추가하면 된다. 
고루틴은 멀티스레드 메커니즘이지만 자체적인 스케줄러에 의해 관리되는 경량 스레드이며 OS에서 관리하는 경량스레드보다 더 경량이다. 
따라서 고루틴은 CPU 코어수와 무관하게 수백 수천만 고루틴을 작성해도 성능에 문제가 생기지 않는다. 
이는 Erlang도 마찬가지. Go는 바이너리 컴파일러이므로 서로 다른 머신 플랫폼들을 타겟으로 배포해야 할 경우 
환경변수(GOOS와 GOARCH 등)를 그에 맞게 설정한 후 컴파일해서 여러 벌의 배포판을 만들어야 한다.</p>

<h2 id="go---2">Go의 비판적 시각</h2>

<p>컴파일 언어인 덕분에, 속도가 느린 스크립트 언어에서 연산 퍼포먼스가 필요한 부분을 Go로 대체해 넣을 수도 있다. 
예를 들면, Go로 만든 코드를 공유 라이브러리로 컴파일해 Ruby에서 FFI를 이용해 컴파일한 .so 파일을 가져와 사용하는 식. 
PHP에서도 역시 가능하다. 다만 기본 패키지들 중에서는 성능보다는 편의성에 초점을 맞춘 탓에 극한의 성능을 추구하는 경우라면 사용을 권하기 어려운 것들이 있다. 
예를 들면 웹 서버 제작시에 쓰이는 net/http나 html/template 등이 그러한데, 
이런 경우엔 기본 패키지를 대체하는 별도의 패키지를 이용하면 (실제 체감효과는 별론으로 하되 벤치마크상으로는 심지어 수십 배나 수치가 좋아지는(…) 경우도 있다.</p>

<ul>
  <li>Go 언어의 설계 지향점이 시스템 프로그래밍 언어이었으나 가비지 컬렉션의 지원이나 제네릭의 부재로 인해 박싱/언박싱이 불필요하게 많이 일어나는 등(시스템프로그램 CLI환경에서 구동하는 녀석으로 시스템콜이 빈번한 프로그래밍이 되어야 하는대 박싱/언박싱의 불필요한 호출로 시스템프로그래밍언어로 적합한가에 대한 의구심이 생기는 추세)</li>
  <li><strong>C/C++을 대체할 수 있는 언어는 아니라는 것</strong> 에 합의가 이루어지고 있는 상황이다.</li>
  <li>실제로 고성능 연산에 사용하기에는 C/C++에 비해 <strong>너무 느리며</strong>,</li>
  <li>저수준 시스템 개발에서는 가비지 컬렉션과 고루틴을 지원하기 위한 <strong>무거운 런타임</strong> 등으로 인해 사용이 불가능에 가깝다.</li>
  <li>대체로 개발 속도와 실행 속도, 병행성 사이의 적정 지점이 필요한 서버 애플리케이션 개발 등에 많이 사용되는 편.</li>
  <li>이전 버젼에서는 저수준 시스템 프로그래밍에서도 C/C++보다 낫다는 식의 서술이 있었으나, 이는 <strong>go를 개발하던 당시 개발진의 목표였을 뿐</strong></li>
  <li>현대 프로그래밍 언어 연구의 성과를 일체 무시한 언어 설계.</li>
  <li><strong>널 포인터</strong>나 <strong>안전하지 않은 타입 캐스팅</strong>을 장려하는 인터페이스</li>
  <li>타입 안전한 제네릭의 부재</li>
</ul>

<h2 id="section-3">유용한 참고 사이트</h2>
<ul>
  <li><a href="http://codingnuri.com/golang-book/">무료 E-Book : condingnuri.com/golang-book</a></li>
  <li><a href="https://plus.google.com/communities/115721275599816202991">Gopher Korea</a></li>
  <li><a href="http://pyrasis.com/go.html">pyrasis.com 의 빠르게 만나는 Go</a></li>
  <li><a href="https://golangkorea.github.io">golangkorea.github.io</a></li>
  <li><a href="https://github.com/arahansa/golkorea">아라한사씨의 깃헙</a>
## 과제
    <ol>
      <li>언어 자체가 가진 매력? 패러다임? 차이점은 무엇인가?</li>
    </ol>
  </li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
