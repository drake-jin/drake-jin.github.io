<xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>blog.drakejin.me</link>
   <description>데이터 분석은 잘 못하지만, 데이터 분석할 수 있게 도와드리겠어요!</description>
   <language>utf-8</language>
   <managingEditor> drakejin</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>(스터디) React에 대해 알아보자 - 4</title>
	  <link>//Study-react-4</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-28T00:00:00+09:00</pubDate>
	  <guid>//Study-react-4</guid>
	  <description><![CDATA[
	     <p>모든 지적 재산권은 velopert 님에게 있습니다. velopert님께 감사합니다.</p>

<h2 id="component---">4강. Component 생성 및 모듈화</h2>

<p>이번 장은 소스코드의 주석으로 상세히 말씀드리겠습니다.</p>

<h2 id="section">소스코드 및 실행</h2>
<p>이번장은 소스코드를 순서대로 살펴보면서 주석들을 자세히 읽어봅시다. 
  0. git clone https://github.com/velopert/react-skeleton.git  &amp;&amp; npm install 
  1. <a href="https://github.com/drake-jin/react-study/tree/master/ch04/react-skeleton/src/index.js">react-skeleton/src/index.js</a>
  2. <a href="https://github.com/drake-jin/react-study/tree/master/ch04/react-skeleton/src/components/App.js">react-skeleton/src/components/App.js</a>
  3. <a href="https://github.com/drake-jin/react-study/tree/master/ch04/react-skeleton/src/components/Header.js">react-skeleton/src/components/Header.js</a>
  4. <a href="https://github.com/drake-jin/react-study/tree/master/ch04/react-skeleton/src/components/Content.js">react-skeleton/src/components/Content.js</a>
  5. npm start</p>


	  ]]></description>
	</item>

	<item>
	  <title>(스터디) React에 대해 알아보자 - 3</title>
	  <link>//Study-react-3</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-28T00:00:00+09:00</pubDate>
	  <guid>//Study-react-3</guid>
	  <description><![CDATA[
	     <p>모든 지적 재산권은 velopert 님에게 있습니다. velopert님께 감사합니다.</p>

<h2 id="jsx">3강. JSX</h2>

<h4 id="react-">react 환경설정</h4>

<p><code class="highlighter-rouge">bash 
$ git clone https://github.com/velopert/react-skeleton.git # 프로젝트 클론하기
$ npm install # dependency설정하기 
$ npm start # 개발서버 실행하기 포트 7777
</code></p>

<h2 id="jsx-1">JSX</h2>

<h3 id="jsx-">JSX의 장점</h3>
<ol>
  <li>JSX는 컴파일링 되면서 최적화 되므로, 빠르다.</li>
  <li>Type-Safe 어떠한 연산도 정의되지 않은 결과를 내놓지 않는 것, 즉 예측 불가능한 결과를 나타내지 않는 것으로 하며, 컴파일링 과정에서 에러를 감지할 수 있다.</li>
  <li>HTML에 익숙하다면 JSX의 사용은 좀 더 명시적이고 빠르게 템플릿을 작성할 수 있다.</li>
</ol>

<ul>
  <li>JSX와 JS 소스코드적인 차이.
    <ul>
      <li><a href="https://jsfiddle.net/reactjs/69z2wepo/">JSX</a> vs <a href="https://jsfiddle.net/reactjs/5vjqabv3/">JS</a></li>
    </ul>
  </li>
</ul>

<h2 id="section">소스코드</h2>
<ol>
  <li><a href="https://github.com/drake-jin/react-study/tree/master/ch03/react-skeleton/src/components/App.js">ch03/react-skeleton/src/components/App.js</a></li>
</ol>


	  ]]></description>
	</item>

	<item>
	  <title>(스터디) React에 대해 알아보자 - 2</title>
	  <link>//Study-react-2</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-28T00:00:00+09:00</pubDate>
	  <guid>//Study-react-2</guid>
	  <description><![CDATA[
	     <p>모든 지적 재산권은 velopert 님에게 있습니다. velopert님께 감사합니다.</p>

<h2 id="section">2강. 설치</h2>

<ol>
  <li>Globalpackage 설치</li>
  <li>babel - 아직 ECMAScript6 를 지원하지 않는 환경에서 ECMAScript6 Syntax를 사용 할 수 있게 해줍니다.</li>
  <li>webpack - 모듈 번들러로서, Browserify 처럼 브라우저 위에서 import (require) 을 할 수 있게 해주고 자바스크립트 파일들을 하나로 합쳐줍니다.</li>
  <li>webpack-dev-server - wepback에서 지원하는 간단한 개발서버로서 별도의 서버를 구축하지 않고도 웹서버를 열 수 있으며 hot-loader를 통하여 코드가 수정될때마다 자동으로 리로드 되게 할 수 있습니다.</li>
</ol>

<p><code class="highlighter-rouge">bash
$ npm install -g babel webpack webpack-dev-server
</code></p>

<ol>
  <li>프로젝트 생성</li>
</ol>

<p><code class="highlighter-rouge">bash
$ mkdir react-tutorial &amp;&amp; cd react-tutorial
$ npm init
</code></p>

<ol>
  <li>Dependency 및 Plugin 설치
    <ul>
      <li>우리가 React 를 사용 할 것이므로, 설치해야줘야합니다. –save 옵션을 통하여 package.json 에 의존 패키지들을 추가 할 수있습니다.</li>
    </ul>
  </li>
</ol>

<p><code class="highlighter-rouge">bash
$ npm install --save react react-dom
</code>
 - babel 에서 사용 될 플러그인을 설치해야합니다. 해당 모듈들은 개발환경에서만 사용되므로 –save-dev 옵션을 설정해주세요.</p>

<p><code class="highlighter-rouge">bash 
$ npm install --save-dev babel-core babel-loader babel-preset-react babel-preset-es2015 webpack webpack-dev-server
</code> 
 - webpack 과 webpack-dev-server 가 글로벌로 이미 설치가 되어있는데, 로컬 모듈로 설치된 이유는 webpack 의 livereload와 비슷한 기능인 –hot 옵션을 사용하기 위함 입니다. 
 - 사실 상, webpack 모듈을 글로벌 패키지로서 꼭 설치 할 필요는 없습니다. 이를 설치 한 이유는 커맨드라인에서 webpack-dev-server을 바로 실행하기 위함인데
 - 로컬에만 설치하고 나중에 webpack 을 실행할 때는 ./node_modules/bin/webpack-dev-server –hot 이런식으로 실행 할 수 있습니다.</p>

<p><em>RESULT:</em>
 <code class="highlighter-rouge">json
"dependencies": {
    "react": "^0.14.7",
    "react-dom": "^0.14.7"  
}, 
    "devDependencies": {
    "babel-core": "^6.7.0",
    "babel-loader": "^6.2.4",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "webpack": "^1.12.14",
    "webpack-dev-server": "^1.14.1"
}
</code></p>

<ol>
  <li>디렉토기 구조 이해 및 파일 생성</li>
</ol>

<p><code class="highlighter-rouge">
$ mkdir src src/components public &amp;&amp; touch public/index.html src/components/App.js src/index.js webpack.config.js
</code></p>

<p><em>RESULT :</em></p>

<blockquote>
  <p>react-tutorial
├── package.json       <br />
├── public            # 서버 public path
│   └── index.html    # 메인 페이지
├── src               # React.js 프로젝트 루트
│   ├── components    # 컴포넌트 폴더
│   │   └── App.js    # App 컴포넌트
│   └── index.js      # Webpack Entry point
└── webpack.config.js # Webpack 설정파일</p>
</blockquote>

<ol>
  <li>컴파일러, 서버 및 로더 설정 
webpack 설정하기 [ webpack.config.js ] ]
ECMAScript6 를 컴파일해주고 개발서버를 열어주는 webpack의 설정파일 webpack config.js 을 수정하세요.</li>
</ol>

<p>``` bash 
module.exports = {
    entry: ‘./src/index.js’,</p>

<div class="highlighter-rouge"><pre class="highlight"><code>output: {
    path: __dirname + '/public/',
    filename: 'bundle.js'
},

devServer: {
    inline: true,
    port: 7777,
    contentBase: __dirname + '/public/'
},

module: {
        loaders: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                query: {
                    cacheDirectory: true,
                    presets: ['es2015', 'react']
                }
            }
        ]
    } };
</code></pre>
</div>

<p>```</p>

<ol>
  <li>webpack 실행 
npm start 명령어를 콘솔에서 입력 했을 때, webpack-dev-server 가 실핼될 수 있게 package.json 의 “script 항목을 수정합니다.”</li>
</ol>

<p><code class="highlighter-rouge">json 
"script":{
    "start" :"webpack-dev-server --hot --host 0.0.0.0"
}
// 만약 localhost 가 아닌 외부 서버에서 dev-server실행시, -host 옵션을 추가하지 않으면 접근이 안됩니다.
// localhost 인 경우에는 생략하면 됩니다.
</code></p>

<ol>
  <li>html 및 js 수정 
index.html 
이 파일은 평범한HTML 파일 입니다. div id = “app”을 react 프로젝트의 root element로 지정하고 
index.js 스크립트를 로드해주세요. 이 파일은 webpack 에서 bundle된 파일로써, react 라이브러리 
및 기타 자바스크립트 파일들이 하나로 합쳐진 파일입니다.</li>
</ol>

<p>``` html
&lt;!DOCTYPE html&gt;</p>
<html>
    <head>
        <meta charset="utf-8" />
        <title> React App </title>
    </head>
    
    <body>
        <div id="root"></div>
        <script src="bundle.js"></script>
    </body>
</html>
<p>```</p>

<ol>
  <li>src/components/App.js
우리가 만들 첫 React컴포넌트 입니다. 파일 및 컴포넌트의 첫 대문자로 입력하는건 React 의 naming
convention이다.</li>
</ol>

<p>``` js
import React from ‘react’;
// let React = require(‘react’)</p>

<p>class App extends React.Components{
    render(){
        return (
            &lt;h1&gt; Hello drakejin!!? &lt;/h1&gt;
        )
    }</p>

<p>}
export default App;
// == module.export = App
```</p>

<ol>
  <li>src/index.js</li>
</ol>

<p>``` js
import React from ‘react’
import ReactDOM from ‘react-dom’
import App from ‘./components/App’</p>

<p>const rootElement = document.getElementById(‘root’)
ReactDOM.render(<app></app>, rootElement);</p>

<p>```</p>

<ol>
  <li>실행하기</li>
</ol>

<p><code class="highlighter-rouge">bash
$ npm start  // package.json 의 내용중 scripts의 내용에 start를 참조한다.
</code></p>


	  ]]></description>
	</item>

	<item>
	  <title>(스터디) React 를 알아보자 - 1</title>
	  <link>//Study-react-1</link>
	  <author>drakejin</author>
	  <pubDate>2017-05-26T00:00:00+09:00</pubDate>
	  <guid>//Study-react-1</guid>
	  <description><![CDATA[
	     <p>React.js 으.. 남들 하니까 협업을 위해 한다 .
개인 정리를 위해 만들었으며 모든 지적 재산권은 https://velopert.com/775 에 있습니다.</p>

<h2 id="react--01---">React 강좌 01: 소개 및 맛보기</h2>

<p>React느 페이스북에서 개발한 UI개발 라이브러리, Virtual DOM을 사용하여 금새 
재사용 가능한 UI를 생설할 수 있게 해준다. react는 페이스북, 인스타, 야후, 넷플리스
에서 사용하고 있고 최근은 스타트업의 프론트UI를 주름잡는 녀석이 되었다.</p>

<h2 id="virtual-dom">Virtual DOM</h2>

<h4 id="dom--">DOM 의 이해</h4>
<p>DOM은 Document Object Model 의 야사. 이는 객체를 통하여 구조화된 문서를 표현하는 방법
XML 또는 HTML로 작성된다. 웹 브라우저는 DOM을 활용하여 객체에 Javascript와 CSS를 적용하고 있다. DOM은 트리형태로 되어있어서 수정, 삭제, 생성에 용이하다.</p>

<h4 id="dom-">DOM의 문제점</h4>
<ul>
  <li>동적 UI(서버와 통신이 잦은 Web Service)에 최적화 되어있지 않다.</li>
  <li>큰 규모의 서비스에서는 수 많은 데이터가 웹으로 로드되어야 하며, 한 DOM객체에 대한것이 아닌 여러 객체에 대해서 CRUD가 이뤄진다.</li>
</ul>

<blockquote>
  <p>잘못알고 있는 상식 
1. DOM은 무겁다.
2. Javascript 접근이 DOM 직접 접근 보다 빠르다 
  - 이는 사실이 아니며 DOM자체는 빠르다. 다만 브라우저 단에서 DOM의 변화가 일어나면 브라우저가 CSS를 다시 연산하고 레이아웃을 다시 구성하고, 웹페이지를 다시 리페인트 하는데, 이 과정에서 시간이 많이 허비되게 된다. 
  - 레이아웃을 새로 구성하면서 계산하는것이 reflow
  - 색상변경과 같은 레이아웃에 관계없는 것들을 처리하는것이 repaint</p>
</blockquote>

<p>``` javascript
var style = document.body.style; // 캐싱 
style.padding = “20px” // reflow, repaint
style.border = “10px solid red” // reflow, repaint</p>

<p>style.color = “blue” // repaint
style.backgroundColor = “#ffa”  // repaint</p>

<p>style.fontSize = “1em”  // reflow, repaint</p>

<p>document.body.appendChild(document.createTextNode(‘hello world!’));
// reflow, repaint</p>

<p>//—– d이것 이외에도 값을 조회만 할 때에도 reflow가 계산된다.
element.offsetLeft      // reflow
element.clientWidth     // reflow
element.getClientRects() // reflow
```</p>

<h4 id="section">브라우저는 바보가 아니다.</h4>
<p>위와 같이 언급한 부분에서는 별것 아닌 작업에도 reflow와 repaint작업이 발생하게됩니다. 
실제로 저런 작업이 실행되면 성능저하를 줄이기 위해 매우 짧은 시간내에 여러 reflow가 발생하려고 할 시 이 작업을 미루고 한꺼번에 처리합니다.</p>

<blockquote>
  <p>단, 일부 코드들 offsetTop, scrollTop, getComputedStyle()등의 코드가 실행 될 때는 현재의 값을 가져오는것들이 중요하기 떄문에 reflow가 여러번 발생할 수 밖에 없게 된다.</p>
</blockquote>

<h4 id="reflow-repaint-">Reflow와 Repaint 해결</h4>
<p>Virtual DOM을 이용하면 실제 DOM에 접근하여 조작하는 대신에, 이를 추상화 시킨 자바스크립트 객체를 구성하여 사용하면 됩니다.
 Virtual DOM은 실제 DOM의 가벼운 사본과 같은 역할을 합니다 .</p>

<ol>
  <li>DOM에 대한 데이터 업데이트가 되면, 전체 UI를 Virtual DOM 에 렌더링 합니다.</li>
  <li>이전 Virtual DOM에 있던 내용과 현재의 내용을 비교합니다.</li>
  <li>바뀐 부분에만 실제 DOM에 적용 됩니다.</li>
</ol>

<blockquote>
  <p>오해 
“React는 항상 빨라!! 빠르다규!”</p>

  <p>React는 무조건 빠른게 아니다. 지속해서 데이터가 변화하는 대규모 애플리케이션에 구축하기 위해 
React를 만들었다.</p>
</blockquote>

<h2 id="react">React</h2>

<h3 id="react-">React 특징</h3>
<ul>
  <li>Virtual DOM을 사용한다.</li>
  <li>JSX : JSX는 javascript의 확장 문법으로써 babel이 이 확장문법을 파싱해주며, React.Component(asd,asd,asd,asd,asd,)의 형태로 변형해준다. 써도그만 안써도 그만, 안쓰면 불편할 뿐</li>
  <li>Components: React는 모두 Component에 대한 것, React 개발을 할 때에는 Component로써 생각해야 한다.</li>
</ul>

<h3 id="react--1">React의 장점</h3>
<ul>
  <li>Virtual DOM을 사용한 어플리케이션의 성능향상</li>
  <li>클라이언트에서 렌더링 될 수 있고 서버측에서도 렌더링 될 수 있음.</li>
  <li>브라우저측의 초기 렌더링 딜레이를 줄이고, SEO호환도 가능해진다.</li>
  <li>Component의 가독성이 매우 높고 간단하여 쉬운 유지보수가 가능해진다.</li>
  <li>프레임워크가 아닌 라이브러리이기 때문에 타 프레임워크와 혼합 사용이 가능하다.</li>
  <li>React에선 UI만 신경쓰고 나머지 라우팅기능은 프레임워크..</li>
</ul>

<h3 id="section-1">제한</h3>
<ul>
  <li>어플리케이션의 View레이어만 다루므로 이 외의 부분은 다른 기술을 사용해야 한다. (Ajax, Router등등..)</li>
  <li>React 버전 v15부터는 IE8 이하 버전을 지원하지 않는다.</li>
</ul>

<h3 id="section-2">맛보기</h3>
<ul>
  <li>React프로젝트를 시작하려면 node.js와 NPM을 설정하고 이것저것 서정을 많이 해야한다 - React를 맛보기 위해 유용하고 편한 웹 서비스인 webpackbin을 사용해보겠다.</li>
</ul>

<ol>
  <li>상단 메뉴의 Boilerplated &gt; React클릭</li>
  <li>index.html, main.js, HelloWorld.js파일이 생긴다.</li>
</ol>

<h4 id="helloworldjs">HelloWorld.js</h4>

<p>``` javascript
import React from ‘react’</p>

<p>function HelloWorld(){
    return (
        &lt;h1&gt; Hello World !&lt;/h1&gt;
    );
}</p>

<p>export default HelloWorld</p>

<p>```
소스코드 설명</p>

<ol>
  <li>상단의 import는 ES6문법으로 사용되며 <em>var React = require(‘react’)</em> 는 동일한 의미이다. require는 Node.js의 것으로 클라이언트 사이드에선 보통 html태그를 이용하여 script를 여럿 불러오지만, require를 이용하지 않습니다. 지원도 하지 않고..</li>
  <li>Bundling webpack이라는 도구를 이용하여 Node.js에서 require하는것과 같이 모듈을 불러올 수 있께 하는 것. Webpack은 이렇게 import(혹은 require)한 모듈을 불러와서 한 파일로 합친다.</li>
  <li>babel-loader는</li>
</ol>

<p><code class="highlighter-rouge">javascript 
    return React.createElement(&lt;h1&gt;Hello World!&lt;/h1&gt;)
</code>
를 
<code class="highlighter-rouge">javascript 
    return React.createElement(
        "h1",
        null,
        "Hello World!"
    );
</code>
로 변환시킨다. JSX =&gt; Javascript</p>

<h4 id="mainjs">main.js</h4>

<p>``` javascript
import React from ‘react’;
import {render} from ‘react-dom’
import HelloWorld from ‘./HelloWorld.js’</p>

<p>render(<helloworld></helloworld>), document.querySelector(“#app”));</p>

<p>```
main.js에서는 HelloWorld.js 에서 만든 컴포넌트를 불러와서 페이지에 렌더링 합니다.</p>

<p>이 파일은webpack의 entry파일 입니다. 여기서부터 import 하는 파일들을 재귀적으로 모두 불러와서 하나의 파일로 합치게 됩니다. 
React컴포넌트를 페이지에 렌더링 할 때에는 react-dom모듈을 불러와서 render함수를 통하여 처리합니다.</p>

<p>여기서 render 함수의 첫 번째 파라미터는 렌더링 할 JSX 형태의 코드 입니다. 여기서는 HelloWorld컴포넌트를 렌더링 하도록 설정하였습니다. 
이런식으로 컴포넌트를 만들면 _<컴포넌트이름></컴포넌트이름>_이런식으로 HTML태그를 작성하듯이 쓸 수 있는것입니다.</p>

<p>두번째 파라메터는 렌더링할 HTML요소 입니다. id가 app인 DOM객체에 렌더링하게 설정했습니다.  이는 index.html에서 찾아볼 수 있습니다 .</p>

<h4 id="indexhtml">index.html</h4>

<p>``` javascript</p>
<html>
    <head>
        <meta charset="utf-8" />
    </head>
    <body>
        <div id="app"></div>
        <script src="main.js"></script>
    </body> 
</html>

<p>```</p>

<h3 id="section-3">컴포넌트에 속성을 줘보자 .</h3>
<p>HelloWorld컴포넌트에 속성을 만들어본다. 코드를 다음과 같이 수정해보자.</p>

<h4 id="helloworldjs-1">HelloWorld.js</h4>

<p>``` javascript
import React from ‘react’;
function HelloWorld (props){
    return (
        &lt;h1&gt; Hello {props.name}!&lt;/h1&gt;
    );
}</p>

<p>export default HelloWorld;
```</p>

<p>함수에 props 파라미터를 추가하고, 이 props.name값을 JSX안에서 렌더링 하도록 하였다. 
JavaScript값을 JSX에서 렌더링 할 때에는 {  }안에 감싸면 JSX가 알아서 값을 가져옵니다.</p>

<p>``` main.js</p>

<p>import React from ‘react’;
import {render} from ‘react-dom’;
import HelloWorld from ‘./HelloWorld.js’</p>

<p>render(<helloworld name="velopert"></helloworld>, document.querySelector(“#app”));
```</p>


	  ]]></description>
	</item>


</channel>
</rss>
